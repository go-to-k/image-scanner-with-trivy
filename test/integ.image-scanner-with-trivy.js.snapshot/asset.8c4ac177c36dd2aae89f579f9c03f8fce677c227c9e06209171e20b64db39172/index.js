"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const client_cloudwatch_logs_1 = require("@aws-sdk/client-cloudwatch-logs");
const types_1 = require("../../src/types");
const TRIVY_IGNORE_FILE_PATH = '/tmp/.trivyignore';
const cwClient = new client_cloudwatch_logs_1.CloudWatchLogsClient();
const handler = async function (event) {
    const requestType = event.RequestType;
    const props = event.ResourceProperties;
    if (!props.addr || !props.imageUri)
        throw new Error('addr and imageUri are required.');
    const funcResponse = {
        PhysicalResourceId: props.addr,
        Data: {},
    };
    if (requestType === 'Create' || requestType === 'Update') {
        const options = makeOptions(props);
        if (props.trivyIgnore.length) {
            console.log('trivyignore: ' + JSON.stringify(props.trivyIgnore));
            makeTrivyIgnoreFile(props.trivyIgnore);
        }
        const cmd = `/opt/trivy image --no-progress ${options.join(' ')} ${props.imageUri}`;
        console.log('command: ' + cmd);
        console.log('imageUri: ' + props.imageUri);
        const response = (0, child_process_1.spawnSync)(cmd, {
            shell: true,
        });
        await outputScanLogs(response, props.imageUri, props.output);
        if (response.status !== 0)
            throw new Error(`Error: ${response.error}\nSignal: ${response.signal}\nStatus: ${response.status}\nImage Scanner returned fatal errors. You may have vulnerabilities. See logs.`);
    }
    return funcResponse;
};
exports.handler = handler;
const makeOptions = (props) => {
    const options = [];
    if (props.ignoreUnfixed === 'true')
        options.push('--ignore-unfixed');
    if (props.severity.length)
        options.push(`--severity ${props.severity.join(',')}`);
    if (props.scanners.length)
        options.push(`--scanners ${props.scanners.join(',')}`);
    if (props.imageConfigScanners.length)
        options.push(`--image-config-scanners ${props.imageConfigScanners.join(',')}`);
    if (props.exitCode)
        options.push(`--exit-code ${props.exitCode}`);
    if (props.exitOnEol)
        options.push(`--exit-on-eol ${props.exitOnEol}`);
    if (props.trivyIgnore.length)
        options.push(`--ignorefile ${TRIVY_IGNORE_FILE_PATH}`);
    if (props.platform)
        options.push(`--platform ${props.platform}`);
    return options;
};
const makeTrivyIgnoreFile = (trivyIgnore) => {
    const ignoreLines = trivyIgnore.join('\n');
    (0, fs_1.writeFileSync)(TRIVY_IGNORE_FILE_PATH, ignoreLines, 'utf-8');
};
const outputScanLogs = async (response, imageUri, output) => {
    switch (output?.type) {
        case types_1.ScanLogsOutputType.CLOUDWATCH_LOGS:
            await outputScanLogsToCWLogs(response, output, imageUri);
            break;
        default:
            // Scan logs output to lambda default log group
            console.log('stderr:\n' + response.stderr.toString());
            console.log('stdout:\n' + response.stdout.toString());
    }
};
const outputScanLogsToCWLogs = async (response, output, imageUri) => {
    // LogStream name must satisfy regular expression pattern: `[^:*]*`.
    // So, we can't use `:` in logStreamName.
    const [uri, tag] = imageUri.split(':');
    const logStreamName = tag ? `uri=${uri},tag=${tag}` : `uri=${uri}`;
    // Ensure log stream exists before putting log events.
    try {
        await cwClient.send(new client_cloudwatch_logs_1.CreateLogStreamCommand({
            logGroupName: output.logGroupName,
            logStreamName,
        }));
    }
    catch (e) {
        // If the log stream already exists, ignore the error.
        if (e instanceof client_cloudwatch_logs_1.ResourceAlreadyExistsException) {
            console.log(`Log stream ${logStreamName} already exists in log group ${output.logGroupName}.`);
        }
        else {
            throw e;
        }
    }
    const timestamp = new Date().getTime();
    const input = {
        logGroupName: output.logGroupName,
        logStreamName: logStreamName,
        logEvents: [
            {
                timestamp,
                message: 'stderr:\n' + response.stderr.toString(),
            },
            {
                timestamp,
                message: 'stdout:\n' + response.stdout.toString(),
            },
        ],
    };
    const command = new client_cloudwatch_logs_1.PutLogEventsCommand(input);
    await cwClient.send(command);
    console.log(`Scan logs output to the log group: ${output.logGroupName}, log stream: ${logStreamName}`);
};
//# sourceMappingURL=data:application/json;base64,