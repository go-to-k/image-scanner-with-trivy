"use strict";var g=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var O=Object.prototype.hasOwnProperty;var h=(e,t)=>{for(var n in t)g(e,n,{get:t[n],enumerable:!0})},L=(e,t,n,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of C(t))!O.call(e,r)&&r!==n&&g(e,r,{get:()=>t[r],enumerable:!(o=y(t,r))||o.enumerable});return e};var w=e=>L(g({},"__esModule",{value:!0}),e);var b={};h(b,{handler:()=>k});module.exports=w(b);var d=require("child_process"),p=require("fs"),a=require("@aws-sdk/client-cloudwatch-logs"),u=require("@aws-sdk/client-cloudformation");var S="/tmp/.trivyignore",m=new a.CloudWatchLogsClient,R=new u.CloudFormationClient,k=async function(e){let t=e.RequestType,n=e.ResourceProperties;if(!n.addr||!n.imageUri)throw new Error("addr and imageUri are required.");let o={PhysicalResourceId:n.addr,Data:{}};if(t==="Create"||t==="Update"){let r=$(n);n.trivyIgnore.length&&(console.log("trivyignore: "+JSON.stringify(n.trivyIgnore)),x(n.trivyIgnore));let i=`/opt/trivy image --no-progress ${r.join(" ")} ${n.imageUri}`;console.log("command: "+i),console.log("imageUri: "+n.imageUri);let s=(0,d.spawnSync)(i,{shell:!0});if(await E(s,n.imageUri,n.output),s.status===0)return o;let c=`Error: ${s.error}
Signal: ${s.signal}
Status: ${s.status}
Image Scanner returned fatal errors. You may have vulnerabilities. See logs.`;if(n.suppressErrorOnRollback==="true"&&await I(e.StackId))return console.log(`Vulnerabilities may be detected, but suppressing errors during rollback (suppressErrorOnRollback=true).
${c}`),o;throw new Error(c)}return o},$=e=>{let t=[];return e.ignoreUnfixed==="true"&&t.push("--ignore-unfixed"),e.severity.length&&t.push(`--severity ${e.severity.join(",")}`),e.scanners.length&&t.push(`--scanners ${e.scanners.join(",")}`),e.imageConfigScanners.length&&t.push(`--image-config-scanners ${e.imageConfigScanners.join(",")}`),e.exitCode&&t.push(`--exit-code ${e.exitCode}`),e.exitOnEol&&t.push(`--exit-on-eol ${e.exitOnEol}`),e.trivyIgnore.length&&t.push(`--ignorefile ${S}`),e.platform&&t.push(`--platform ${e.platform}`),t},x=e=>{let t=e.join(`
`);(0,p.writeFileSync)(S,t,"utf-8")},E=async(e,t,n)=>{switch(n?.type){case"cloudWatchLogs":await v(e,n,t);break;default:console.log(`stderr:
`+e.stderr.toString()),console.log(`stdout:
`+e.stdout.toString())}},v=async(e,t,n)=>{let[o,r]=n.split(":"),i=r?`uri=${o},tag=${r}`:`uri=${o}`;try{await m.send(new a.CreateLogStreamCommand({logGroupName:t.logGroupName,logStreamName:i}))}catch(l){if(l instanceof a.ResourceAlreadyExistsException)console.log(`Log stream ${i} already exists in log group ${t.logGroupName}.`);else throw l}let s=new Date().getTime(),c={logGroupName:t.logGroupName,logStreamName:i,logEvents:[{timestamp:s,message:`stderr:
`+e.stderr.toString()},{timestamp:s,message:`stdout:
`+e.stdout.toString()}]},f=new a.PutLogEventsCommand(c);await m.send(f),console.log(`Scan logs output to the log group: ${t.logGroupName}, log stream: ${i}`)},I=async e=>{let t=new u.DescribeStacksCommand({StackName:e}),n=await R.send(t);if(n.Stacks&&n.Stacks.length>0)return n.Stacks[0].StackStatus==="ROLLBACK_IN_PROGRESS";throw new Error(`Stack not found or no stacks returned from DescribeStacks command, stackId: ${e}`)};0&&(module.exports={handler});
